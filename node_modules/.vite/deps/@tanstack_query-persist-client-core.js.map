{
  "version": 3,
  "sources": ["../../@tanstack/query-persist-client-core/src/persist.ts", "../../@tanstack/query-persist-client-core/src/retryStrategies.ts"],
  "sourcesContent": ["import { dehydrate, hydrate } from '@tanstack/query-core'\nimport type {\n  DehydrateOptions,\n  DehydratedState,\n  HydrateOptions,\n  QueryClient,\n} from '@tanstack/query-core'\nimport type { NotifyEventType } from '@tanstack/query-core'\n\nexport type Promisable<T> = T | PromiseLike<T>\n\nexport interface Persister {\n  persistClient(persistClient: PersistedClient): Promisable<void>\n  restoreClient(): Promisable<PersistedClient | undefined>\n  removeClient(): Promisable<void>\n}\n\nexport interface PersistedClient {\n  timestamp: number\n  buster: string\n  clientState: DehydratedState\n}\n\nexport interface PersistQueryClienRootOptions {\n  /** The QueryClient to persist */\n  queryClient: QueryClient\n  /** The Persister interface for storing and restoring the cache\n   * to/from a persisted location */\n  persister: Persister\n  /** A unique string that can be used to forcefully\n   * invalidate existing caches if they do not share the same buster string */\n  buster?: string\n}\n\nexport interface PersistedQueryClientRestoreOptions\n  extends PersistQueryClienRootOptions {\n  /** The max-allowed age of the cache in milliseconds.\n   * If a persisted cache is found that is older than this\n   * time, it will be discarded */\n  maxAge?: number\n  /** The options passed to the hydrate function */\n  hydrateOptions?: HydrateOptions\n}\n\nexport interface PersistedQueryClientSaveOptions\n  extends PersistQueryClienRootOptions {\n  /** The options passed to the dehydrate function */\n  dehydrateOptions?: DehydrateOptions\n}\n\nexport interface PersistQueryClientOptions\n  extends PersistedQueryClientRestoreOptions,\n    PersistedQueryClientSaveOptions,\n    PersistQueryClienRootOptions {}\n\n/**\n * Checks if emitted event is about cache change and not about observers.\n * Useful for persist, where we only want to trigger save when cache is changed.\n */\nconst cacheableEventTypes: Array<NotifyEventType> = [\n  'added',\n  'removed',\n  'updated',\n]\n\nfunction isCacheableEventType(eventType: NotifyEventType) {\n  return cacheableEventTypes.includes(eventType)\n}\n\n/**\n * Restores persisted data to the QueryCache\n *  - data obtained from persister.restoreClient\n *  - data is hydrated using hydrateOptions\n * If data is expired, busted, empty, or throws, it runs persister.removeClient\n */\nexport async function persistQueryClientRestore({\n  queryClient,\n  persister,\n  maxAge = 1000 * 60 * 60 * 24,\n  buster = '',\n  hydrateOptions,\n}: PersistedQueryClientRestoreOptions) {\n  try {\n    const persistedClient = await persister.restoreClient()\n\n    if (persistedClient) {\n      if (persistedClient.timestamp) {\n        const expired = Date.now() - persistedClient.timestamp > maxAge\n        const busted = persistedClient.buster !== buster\n        if (expired || busted) {\n          persister.removeClient()\n        } else {\n          hydrate(queryClient, persistedClient.clientState, hydrateOptions)\n        }\n      } else {\n        persister.removeClient()\n      }\n    }\n  } catch (err) {\n    if (process.env.NODE_ENV !== 'production') {\n      queryClient.getLogger().error(err)\n      queryClient\n        .getLogger()\n        .warn(\n          'Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.',\n        )\n    }\n    persister.removeClient()\n  }\n}\n\n/**\n * Persists data from the QueryCache\n *  - data dehydrated using dehydrateOptions\n *  - data is persisted using persister.persistClient\n */\nexport async function persistQueryClientSave({\n  queryClient,\n  persister,\n  buster = '',\n  dehydrateOptions,\n}: PersistedQueryClientSaveOptions) {\n  const persistClient: PersistedClient = {\n    buster,\n    timestamp: Date.now(),\n    clientState: dehydrate(queryClient, dehydrateOptions),\n  }\n\n  await persister.persistClient(persistClient)\n}\n\n/**\n * Subscribe to QueryCache and MutationCache updates (for persisting)\n * @returns an unsubscribe function (to discontinue monitoring)\n */\nexport function persistQueryClientSubscribe(\n  props: PersistedQueryClientSaveOptions,\n) {\n  const unsubscribeQueryCache = props.queryClient\n    .getQueryCache()\n    .subscribe((event) => {\n      if (isCacheableEventType(event.type)) {\n        persistQueryClientSave(props)\n      }\n    })\n\n  const unusbscribeMutationCache = props.queryClient\n    .getMutationCache()\n    .subscribe((event) => {\n      if (isCacheableEventType(event.type)) {\n        persistQueryClientSave(props)\n      }\n    })\n\n  return () => {\n    unsubscribeQueryCache()\n    unusbscribeMutationCache()\n  }\n}\n\n/**\n * Restores persisted data to QueryCache and persists further changes.\n */\nexport function persistQueryClient(\n  props: PersistQueryClientOptions,\n): [() => void, Promise<void>] {\n  let hasUnsubscribed = false\n  let persistQueryClientUnsubscribe: (() => void) | undefined\n  const unsubscribe = () => {\n    hasUnsubscribed = true\n    persistQueryClientUnsubscribe?.()\n  }\n\n  // Attempt restore\n  const restorePromise = persistQueryClientRestore(props).then(() => {\n    if (!hasUnsubscribed) {\n      // Subscribe to changes in the query cache to trigger the save\n      persistQueryClientUnsubscribe = persistQueryClientSubscribe(props)\n    }\n  })\n\n  return [unsubscribe, restorePromise]\n}\n", "import type { PersistedClient } from '@tanstack/query-persist-client-core'\n\nexport type PersistRetryer = (props: {\n  persistedClient: PersistedClient\n  error: Error\n  errorCount: number\n}) => PersistedClient | undefined\n\nexport const removeOldestQuery: PersistRetryer = ({ persistedClient }) => {\n  const mutations = [...persistedClient.clientState.mutations]\n  const queries = [...persistedClient.clientState.queries]\n  const client: PersistedClient = {\n    ...persistedClient,\n    clientState: { mutations, queries },\n  }\n\n  // sort queries by dataUpdatedAt (oldest first)\n  const sortedQueries = [...queries].sort(\n    (a, b) => a.state.dataUpdatedAt - b.state.dataUpdatedAt,\n  )\n\n  // clean oldest query\n  if (sortedQueries.length > 0) {\n    const oldestData = sortedQueries.shift()\n    client.clientState.queries = queries.filter((q) => q !== oldestData)\n    return client\n  }\n\n  return undefined\n}\n"],
  "mappings": ";;;;;;;AA2DA,IAAMA,sBAA8C,CAClD,SACA,WACA,SAHkD;AAMpD,SAASC,qBAAqBC,WAA4B;AACxD,SAAOF,oBAAoBG,SAASD,SAA7B;AACR;AAQM,eAAeE,0BAA0B;EAC9CC;EACAC;EACAC,SAAS,MAAO,KAAK,KAAK;EAC1BC,SAAS;EACTC;AAL8C,GAMT;AACrC,MAAI;AACF,UAAMC,kBAAkB,MAAMJ,UAAUK,cAAV;AAE9B,QAAID,iBAAiB;AACnB,UAAIA,gBAAgBE,WAAW;AAC7B,cAAMC,UAAUC,KAAKC,IAAL,IAAaL,gBAAgBE,YAAYL;AACzD,cAAMS,SAASN,gBAAgBF,WAAWA;AAC1C,YAAIK,WAAWG,QAAQ;AACrBV,oBAAUW,aAAV;QACD,OAAM;AACLC,kBAAQb,aAAaK,gBAAgBS,aAAaV,cAA3C;QACR;MACF,OAAM;AACLH,kBAAUW,aAAV;MACD;IACF;WACMG,KAAK;AACZ,QAAIC,MAAuC;AACzChB,kBAAYiB,UAAZ,EAAwBC,MAAMH,GAA9B;AACAf,kBACGiB,UADH,EAEGE,KACC,0IAHJ;IAKD;AACDlB,cAAUW,aAAV;EACD;AACF;AAOM,eAAeQ,uBAAuB;EAC3CpB;EACAC;EACAE,SAAS;EACTkB;AAJ2C,GAKT;AAClC,QAAMC,gBAAiC;IACrCnB;IACAI,WAAWE,KAAKC,IAAL;IACXI,aAAaS,UAAUvB,aAAaqB,gBAAd;;AAGxB,QAAMpB,UAAUqB,cAAcA,aAAxB;AACP;AAMM,SAASE,4BACdC,OACA;AACA,QAAMC,wBAAwBD,MAAMzB,YACjC2B,cAD2B,EAE3BC,UAAWC,WAAU;AACpB,QAAIjC,qBAAqBiC,MAAMC,IAAP,GAAc;AACpCV,6BAAuBK,KAAD;IACvB;EACF,CAN2B;AAQ9B,QAAMM,2BAA2BN,MAAMzB,YACpCgC,iBAD8B,EAE9BJ,UAAWC,WAAU;AACpB,QAAIjC,qBAAqBiC,MAAMC,IAAP,GAAc;AACpCV,6BAAuBK,KAAD;IACvB;EACF,CAN8B;AAQjC,SAAO,MAAM;AACXC,0BAAqB;AACrBK,6BAAwB;;AAE3B;AAKM,SAASE,mBACdR,OAC6B;AAC7B,MAAIS,kBAAkB;AACtB,MAAIC;AACJ,QAAMC,cAAc,MAAM;AACxBF,sBAAkB;AAClBC,qCAA6B,OAA7B,SAAAA,8BAA6B;EAC9B;AAGD,QAAME,iBAAiBtC,0BAA0B0B,KAAD,EAAQa,KAAK,MAAM;AACjE,QAAI,CAACJ,iBAAiB;AAEpBC,sCAAgCX,4BAA4BC,KAAD;IAC5D;EACF,CALsB;AAOvB,SAAO,CAACW,aAAaC,cAAd;AACR;;;AC9KM,IAAME,oBAAoC,CAAC;EAAEC;AAAF,MAAwB;AACxE,QAAMC,YAAY,CAAC,GAAGD,gBAAgBE,YAAYD,SAAhC;AAClB,QAAME,UAAU,CAAC,GAAGH,gBAAgBE,YAAYC,OAAhC;AAChB,QAAMC,SAA0B;IAC9B,GAAGJ;IACHE,aAAa;MAAED;MAAWE;IAAb;EAFiB;AAMhC,QAAME,gBAAgB,CAAC,GAAGF,OAAJ,EAAaG,KACjC,CAACC,GAAGC,MAAMD,EAAEE,MAAMC,gBAAgBF,EAAEC,MAAMC,aADtB;AAKtB,MAAIL,cAAcM,SAAS,GAAG;AAC5B,UAAMC,aAAaP,cAAcQ,MAAd;AACnBT,WAAOF,YAAYC,UAAUA,QAAQW,OAAQC,OAAMA,MAAMH,UAA5B;AAC7B,WAAOR;EACR;AAED,SAAOY;AACR;",
  "names": ["cacheableEventTypes", "isCacheableEventType", "eventType", "includes", "persistQueryClientRestore", "queryClient", "persister", "maxAge", "buster", "hydrateOptions", "persistedClient", "restoreClient", "timestamp", "expired", "Date", "now", "busted", "removeClient", "hydrate", "clientState", "err", "process", "getLogger", "error", "warn", "persistQueryClientSave", "dehydrateOptions", "persistClient", "dehydrate", "persistQueryClientSubscribe", "props", "unsubscribeQueryCache", "getQueryCache", "subscribe", "event", "type", "unusbscribeMutationCache", "getMutationCache", "persistQueryClient", "hasUnsubscribed", "persistQueryClientUnsubscribe", "unsubscribe", "restorePromise", "then", "removeOldestQuery", "persistedClient", "mutations", "clientState", "queries", "client", "sortedQueries", "sort", "a", "b", "state", "dataUpdatedAt", "length", "oldestData", "shift", "filter", "q", "undefined"]
}
