{
  "version": 3,
  "sources": ["../../@tanstack/svelte-query/build/lib/context.js", "../../@tanstack/svelte-query/build/lib/useQueryClient.js", "../../@tanstack/svelte-query/build/lib/createBaseQuery.js", "../../@tanstack/svelte-query/build/lib/createQuery.js", "../../@tanstack/svelte-query/build/lib/createQueries.js", "../../@tanstack/svelte-query/build/lib/createInfiniteQuery.js", "../../@tanstack/svelte-query/build/lib/createMutation.js", "../../@tanstack/svelte-query/build/lib/useIsFetching.js", "../../@tanstack/svelte-query/build/lib/useIsMutating.js", "../../@tanstack/svelte-query/build/lib/useHydrate.js", "../../@tanstack/svelte-query/build/lib/Hydrate.svelte", "../../@tanstack/svelte-query/build/lib/QueryClientProvider.svelte"],
  "sourcesContent": ["import { getContext, setContext } from 'svelte';\nconst _contextKey = '$$_queryClient';\n/** Retrieves a Client from Svelte's context */\nexport const getQueryClientContext = () => {\n    const client = getContext(_contextKey);\n    if (!client) {\n        throw new Error('No QueryClient was found in Svelte context. Did you forget to wrap your component with QueryClientProvider?');\n    }\n    return client;\n};\n/** Sets a QueryClient on Svelte's context */\nexport const setQueryClientContext = (client) => {\n    setContext(_contextKey, client);\n};\n", "import { getQueryClientContext } from './context';\nexport function useQueryClient() {\n    const queryClient = getQueryClientContext();\n    return queryClient;\n}\n", "import { notifyManager, } from '@tanstack/query-core';\nimport { derived, readable } from 'svelte/store';\nimport { useQueryClient } from './useQueryClient';\nexport function createBaseQuery(options, Observer) {\n    const queryClient = useQueryClient();\n    const defaultedOptions = queryClient.defaultQueryOptions(options);\n    defaultedOptions._optimisticResults = 'optimistic';\n    let observer = new Observer(queryClient, defaultedOptions);\n    // Include callbacks in batch renders\n    if (defaultedOptions.onError) {\n        defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n    }\n    if (defaultedOptions.onSuccess) {\n        defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n    }\n    if (defaultedOptions.onSettled) {\n        defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n    }\n    readable(observer).subscribe(($observer) => {\n        observer = $observer;\n        // Do not notify on updates because of changes in the options because\n        // these changes should already be reflected in the optimistic result.\n        observer.setOptions(defaultedOptions, { listeners: false });\n    });\n    const result = readable(observer.getCurrentResult(), (set) => {\n        return observer.subscribe(notifyManager.batchCalls(set));\n    });\n    const { subscribe } = derived(result, ($result) => {\n        $result = observer.getOptimisticResult(defaultedOptions);\n        return !defaultedOptions.notifyOnChangeProps\n            ? observer.trackResult($result)\n            : $result;\n    });\n    return { subscribe };\n}\n", "import { QueryObserver, parseQueryArgs } from '@tanstack/query-core';\nimport { createBaseQuery } from './createBaseQuery';\nexport function createQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const result = createBaseQuery(parsedOptions, QueryObserver);\n    return result;\n}\n", "import { QueriesObserver, notifyManager } from '@tanstack/query-core';\nimport { readable } from 'svelte/store';\nimport { useQueryClient } from './useQueryClient';\nexport function createQueries(queries) {\n    const client = useQueryClient();\n    // const isRestoring = useIsRestoring()\n    function getDefaultQuery(newQueries) {\n        return newQueries.map((options) => {\n            const defaultedOptions = client.defaultQueryOptions(options);\n            // Make sure the results are already in fetching state before subscribing or updating options\n            defaultedOptions._optimisticResults = 'optimistic';\n            return defaultedOptions;\n        });\n    }\n    const defaultedQueries = getDefaultQuery(queries);\n    let observer = new QueriesObserver(client, defaultedQueries);\n    readable(observer).subscribe(($observer) => {\n        observer = $observer;\n        // Do not notify on updates because of changes in the options because\n        // these changes should already be reflected in the optimistic result.\n        observer.setQueries(defaultedQueries, { listeners: false });\n    });\n    const { subscribe } = readable(observer.getOptimisticResult(defaultedQueries), (set) => {\n        return observer.subscribe(notifyManager.batchCalls(set));\n    });\n    return { subscribe };\n}\n", "import { InfiniteQueryObserver, parseQueryArgs, } from '@tanstack/query-core';\nimport { createBaseQuery } from './createBaseQuery';\nexport function createInfiniteQuery(arg1, arg2, arg3) {\n    const options = parseQueryArgs(arg1, arg2, arg3);\n    return createBaseQuery(options, InfiniteQueryObserver);\n}\n", "import { derived, readable } from 'svelte/store';\nimport { MutationObserver, notifyManager, parseMutationArgs, } from '@tanstack/query-core';\nimport { useQueryClient } from './useQueryClient';\nexport function createMutation(arg1, arg2, arg3) {\n    const options = parseMutationArgs(arg1, arg2, arg3);\n    const queryClient = useQueryClient();\n    let observer = new MutationObserver(queryClient, options);\n    let mutate;\n    readable(observer).subscribe(($observer) => {\n        observer = $observer;\n        mutate = (variables, mutateOptions) => {\n            observer.mutate(variables, mutateOptions).catch(noop);\n        };\n        observer.setOptions(options);\n    });\n    const result = readable(observer.getCurrentResult(), (set) => {\n        return observer.subscribe(notifyManager.batchCalls((val) => set(val)));\n    });\n    const { subscribe } = derived(result, ($result) => ({\n        ...$result,\n        mutate,\n        mutateAsync: $result.mutate,\n    }));\n    return { subscribe };\n}\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() { }\n", "import { notifyManager, parseFilterArgs, } from '@tanstack/query-core';\nimport { readable } from 'svelte/store';\nimport { useQueryClient } from './useQueryClient';\nexport function useIsFetching(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    const client = useQueryClient();\n    const cache = client.getQueryCache();\n    // isFetching is the prev value initialized on mount *\n    let isFetching = client.isFetching(filters);\n    const { subscribe } = readable(isFetching, (set) => {\n        return cache.subscribe(notifyManager.batchCalls(() => {\n            const newIsFetching = client.isFetching(filters);\n            if (isFetching !== newIsFetching) {\n                // * and update with each change\n                isFetching = newIsFetching;\n                set(isFetching);\n            }\n        }));\n    });\n    return { subscribe };\n}\n", "import { notifyManager, parseMutationFilterArgs, } from '@tanstack/query-core';\nimport { readable } from 'svelte/store';\nimport { useQueryClient } from './useQueryClient';\nexport function useIsMutating(arg1, arg2) {\n    const [filters] = parseMutationFilterArgs(arg1, arg2);\n    const client = useQueryClient();\n    const cache = client.getMutationCache();\n    // isMutating is the prev value initialized on mount *\n    let isMutating = client.isMutating(filters);\n    const { subscribe } = readable(isMutating, (set) => {\n        return cache.subscribe(notifyManager.batchCalls(() => {\n            const newIisMutating = client.isMutating(filters);\n            if (isMutating !== newIisMutating) {\n                // * and update with each change\n                isMutating = newIisMutating;\n                set(isMutating);\n            }\n        }));\n    });\n    return { subscribe };\n}\n", "import { hydrate, } from '@tanstack/query-core';\nimport { useQueryClient } from './useQueryClient';\nexport function useHydrate(state, options) {\n    const client = useQueryClient();\n    if (state) {\n        hydrate(client, state, options);\n    }\n}\n", null, null],
  "mappings": "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",
  "names": []
}
