/// <reference types="node" />
import { type MutationOptions, QueryClient, type QueryClientConfig } from '../index';
export declare function createQueryClient(config?: QueryClientConfig): QueryClient;
export declare function mockVisibilityState(value: DocumentVisibilityState): import("vitest/dist/index-1cfc7f58").S<[], DocumentVisibilityState>;
export declare function mockNavigatorOnLine(value: boolean): import("vitest/dist/index-1cfc7f58").S<[], boolean>;
export declare const mockLogger: {
    log: import("vitest/dist/index-1cfc7f58").x<any[], any>;
    warn: import("vitest/dist/index-1cfc7f58").x<any[], any>;
    error: import("vitest/dist/index-1cfc7f58").x<any[], any>;
};
export declare function queryKey(): Array<string>;
export declare function sleep(timeout: number): Promise<void>;
export declare function simplefetcher(): Promise<string>;
export declare function setActTimeout(fn: () => void, ms?: number): NodeJS.Timeout;
/**
 * Assert the parameter is of a specific type.
 */
export declare function expectType<T>(_: T): void;
/**
 * Assert the parameter is not typed as `any`
 */
export declare function expectTypeNotAny<T>(_: 0 extends 1 & T ? never : T): void;
export declare function executeMutation(queryClient: QueryClient, options: MutationOptions<any, any, any, any>): Promise<unknown>;
