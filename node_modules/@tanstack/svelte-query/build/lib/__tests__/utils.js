import { vi } from 'vitest';
import { act } from '@testing-library/svelte';
import { QueryClient, } from '../index';
export function createQueryClient(config) {
    vi.spyOn(console, 'error').mockImplementation(() => undefined);
    return new QueryClient({ logger: mockLogger, ...config });
}
export function mockVisibilityState(value) {
    return vi.spyOn(document, 'visibilityState', 'get').mockReturnValue(value);
}
export function mockNavigatorOnLine(value) {
    return vi.spyOn(navigator, 'onLine', 'get').mockReturnValue(value);
}
export const mockLogger = {
    log: vi.fn(),
    warn: vi.fn(),
    error: vi.fn(),
};
let queryKeyCount = 0;
export function queryKey() {
    queryKeyCount++;
    return [`query_${queryKeyCount}`];
}
export function sleep(timeout) {
    return new Promise((resolve, _reject) => {
        setTimeout(resolve, timeout);
    });
}
export async function simplefetcher() {
    await sleep(10);
    return 'test';
}
export function setActTimeout(fn, ms) {
    return setTimeout(() => {
        act(() => {
            fn();
        });
    }, ms);
}
/**
 * Assert the parameter is of a specific type.
 */
export function expectType(_) {
    return undefined;
}
/**
 * Assert the parameter is not typed as `any`
 */
export function expectTypeNotAny(_) {
    return undefined;
}
export function executeMutation(queryClient, options) {
    return queryClient.getMutationCache().build(queryClient, options).execute();
}
