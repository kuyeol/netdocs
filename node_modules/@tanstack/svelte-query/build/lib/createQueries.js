import { QueriesObserver, notifyManager } from '@tanstack/query-core';
import { readable } from 'svelte/store';
import { useQueryClient } from './useQueryClient';
export function createQueries(queries) {
    const client = useQueryClient();
    // const isRestoring = useIsRestoring()
    function getDefaultQuery(newQueries) {
        return newQueries.map((options) => {
            const defaultedOptions = client.defaultQueryOptions(options);
            // Make sure the results are already in fetching state before subscribing or updating options
            defaultedOptions._optimisticResults = 'optimistic';
            return defaultedOptions;
        });
    }
    const defaultedQueries = getDefaultQuery(queries);
    let observer = new QueriesObserver(client, defaultedQueries);
    readable(observer).subscribe(($observer) => {
        observer = $observer;
        // Do not notify on updates because of changes in the options because
        // these changes should already be reflected in the optimistic result.
        observer.setQueries(defaultedQueries, { listeners: false });
    });
    const { subscribe } = readable(observer.getOptimisticResult(defaultedQueries), (set) => {
        return observer.subscribe(notifyManager.batchCalls(set));
    });
    return { subscribe };
}
